---

- name: find out uuid for target devices for fstab / crypttab
  command: "lsblk -nJ -o NAME,UUID,PARTUUID {{ _tgt_devices.keys()|join(' ') }}"
  register: _lsblk

- set_fact:
    _tmp: '{{ _lsblk.stdout|from_json }}'

- name: add uuid to _tgt_devices
  set_fact:
    _tgt_devices: >
      {{ _tgt_devices|combine({'/dev/' + item.name: _tgt_devices['/dev/'+ item.name]|default({})|combine({'uuid': item.uuid })}) }}
  with_items: "{{ _tmp['blockdevices'] }}"
  when: item.uuid is defined and _tgt_devices['/dev/' + item.name] is defined

- name: add uuid to _tgt_devices (device mapper)
  set_fact:
    _tgt_devices: >
      {{ _tgt_devices|combine({'/dev/mapper/' + item.name: _tgt_devices['/dev/mapper/'+ item.name]|default({})|combine({'uuid': item.uuid })}) }}
  with_items: "{{ _tmp['blockdevices'] }}"
  when: item.uuid is defined and _tgt_devices['/dev/mapper/' + item.name] is defined

- name: place templates in /etc
  template:
    src: "{{ item.src }}"
    dest: "{{ _tgt_root }}/etc/{{ item.dest|default(item.src) }}"
    owner: "{{ item.owner|default('root') }}"
    group: "{{ item.group|default('root') }}"
    mode: "{{ item.mode|default('0644') }}"
  with_items:
  - { src: 'fstab' }
  - { src: 'crypttab', dest: 'crypttab' }

- name: create folder for on luks keyfiles in bootstrap
  ansible.builtin.file:
    path: "{{ _tgt_root }}/{{ item.value.keyfile | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0400"
  loop_control:
    label: "{{ item.value.keyfile | default('Null') }}"
  with_dict: "{{ _encrypt_targets | default({}) }}"
  #when: item.value.keyfile is defined
  when: item.value.keyfile is defined | default(false)

- name: Copy luks keyfile in bootstrap
  ansible.builtin.copy:
    src: "{{ item.value.keyfile }}"
    dest: "{{ _tgt_root }}/{{ item.value.keyfile }}"
    owner: root
    group: root
    mode: "0400"
    remote_src: true
  loop_control:
    label: "{{ item.value.keyfile | default('Null') }}"
  with_dict: "{{ _encrypt_targets | default({}) }}"
  #when: item.value.keyfile is defined
  when: item.value.keyfile is defined | default(false)


- name: Add thin provisoning hook
  copy:
    src: "lvm-thin"
    dest: "{{ _tgt_root }}/etc/initramfs-tools/hooks/lvm-thin"
    owner: root
    group: root
    mode: 0755
  when: 
    - lvm is defined
    - boot_system == "initramfs"

# In some configurations initramfstools will not correctly detect encrypted root, this
# forces cryptsetup to be included.
- name: enforce cryptsetup in initramfs
  copy:
    dest: "{{ _tgt_root }}/etc/initramfs-tools/conf.d/cryptsetup"
    content: "export CRYPTSETUP=y"
  when: 
    - _luksopen is defined and _luksopen.changed
    - boot_system == "initramfs"

- name: update initramfs
  command: chroot {{ _tgt_root }} update-initramfs -u -k all
  when: boot_system == "initramfs"

- block:

    #- name: get installed kernel versions
    #  command: chroot {{ _tgt_root }} ls -m /lib/modules
    #  register: available_kernel_versions_result

    #- name: copy dracut default config
    #  copy:
    #    src: dracut_defaults
    #    dest: "{{ _tgt_root }}/etc/dracut.conf.d/dracut_defaults.conf"
    #    owner: root
    #    group: root
    #    mode: '0644'      

    #- name: copy dracut kernel config
    #  copy:
    #    src: dracut_kernel
    #    dest: "{{ _tgt_root }}/etc/kernel/install.conf"
    #    owner: root
    #    group: root
    #    mode: '0644' 
    
    - name: copy dracut config
      template:
        src: dracut_cmdline
        dest: "{{ _tgt_root }}/etc/dracut.conf.d/cmdline.conf"
        owner: root
        group: root
        mode: '0644'  
      vars:
        _dracut_rootfstype: "{% if zfs_pool is defined | default(false) and zfs_pool | length > 0 %}zfs{% else %}auto{% endif %}"      
        _dracut_root: "{% if zfs_pool is defined | default(false) and zfs_pool | length > 0 %}ZFS={{ zfs_root }}{% else %}{{ root_system }}{% endif %}"  
        _dracut_luks: "{{ _tgt_devices.values() | list | to_nice_json | from_json | json_query(_query_partition_decrypt_at_boot) | flatten }}"
        _query_partition_decrypt_at_boot: "[?decrypt_at_boot == `true` && !contains(keys(@), `luksuuid`)].uuid"  
    
    - name: create folder for dracut uki
      ansible.builtin.file:
        path: "{{ _tgt_root }}/boot/efi/EFI/Linux"
        state: directory
        owner: root
        group: root
        mode: "0755"

    #- name: update dracut
    #  command: chroot {{ _tgt_root }} dracut --force --kver {{ item }} /boot/efi/EFI/Linux/{{ item }}.efi
    #  loop: "{{ available_kernel_versions_result.stdout | split(', ') | list }}"  

  when: boot_system == "dracut"

- name: set up grub
  command: chroot {{ _tgt_root }} update-grub

- name: Enable cryptodisk (grub)
  ansible.builtin.lineinfile:
    path: "{{ _tgt_root }}/etc/default/grub"
    regexp: '^GRUB_ENABLE_CRYPTODISK'
    insertafter: '^#GRUB_ENABLE_CRYPTODISK'
    line: GRUB_ENABLE_CRYPTODISK=y                 
  vars:                                                    
    _query_layout_encrypt: "[].partitions[].encrypt"                          
    _query_md_encrypt: "[].encrypt"  
  when: true in layout | json_query(_query_layout_encrypt) or true in md | json_query(_query_md_encrypt)

- name: install boot loader (grub)
  command: chroot {{ _tgt_root }} grub-install {{ item['device'] }}
  with_items: "{{ layout }}"
  when: not item['skip_grub']|default(False)

- name: set root password
  command: >
      chroot {{ _tgt_root }} usermod -p '{{ root_password }}' root
  when: root_password is defined
