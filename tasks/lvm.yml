---

- block:
  - name: Install dependencies on host
    apt:
      name: "{{ dependencies.lvm }}"
      state: present
      update_cache: no

  - name: Be sure to install lvm2 in target
    set_fact:
      install_packages: "{{ install_packages + dependencies.lvm }}"

  when: lvm|count > 0

- name: create volume groups
  lvg:
    state: present
    vg: "{{ item.vg }}"
    pvs: "{{ item.pv }}"
  loop: "{{ lvm }}"

- name: create LVM columes
  lvol:
    active: "{{ item.1.active | default(omit) }}"
    force: "{{ item.1.force | default(omit) }}"
    lv: "{{ item.1.name | default(omit) }}"
    opts: "{{ item.1.opts | default(omit) }}"
    #pvs: "{{ item.1.pv | default([]) | list }}"
    pvs: "{{ item.1.pv | default([]) | join(', ') }}"
    size: "{{ item.1.size | default(omit) }}"
    thinpool: "{{ item.1.thinpool | default(omit) }}"
    vg: "{{ item.0.vg | default(omit) }}"
  loop: "{{ lvm | subelements('lv') }}"

- name: create LVM cache-pool
  command: |
    lvconvert -fy --type cache-pool \
    --cachemode {{ item.1.cache.cachemode | d('writethrough') }} \
    {% if item.1.cache.poolmetadata is defined %}--poolmetadata {{ item.0.vg }}/{{ item.1.cache.poolmetadata }} {% endif %} \
    {{ item.0.vg }}/{{ item.1.cache.cachepool }} \
  when: item.1.cache is defined
  loop: "{{ lvm | subelements('lv') }}"
  
- name: create LVM cache
  command: |
    lvconvert -fy --type cache \
    --cachepool {{ item.0.vg }}/{{ item.1.cache.cachepool }} \
    {{ item.0.vg }}/{{ item.1.name }}
  when: item.1.cache is defined
  loop: "{{ lvm | subelements('lv') }}"

- name: add lv to devices
  set_fact:
    _tgt_devices: >
      {{ _tgt_devices|default({})|combine({"/dev/mapper/" + item.0.vg|replace("-", "--") + "-" + item.1.name|replace("-", "--"): (item.0 | combine({ 'lv': omit }) | combine(item.1))|combine({'use_dev': True}) }) }}
  vars:
    - _cachepool: "{{ item.0.lv | selectattr('cache.cachepool', 'defined') | map(attribute='cache.cachepool') | list }}"
    - _poolmetadata: "{{ item.0.lv | selectattr('cache.poolmetadata', 'defined') | map(attribute='cache.poolmetadata') | list }}"
  when: item.1.name not in (_cachepool + _poolmetadata) | unique
  loop: "{{ lvm | subelements('lv') }}"

